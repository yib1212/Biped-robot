
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_NANO_Bluetooth_Slave(

	//////////// ADC //////////
//	output		          		ADC_CONVST,
//	output		          		ADC_SCK,
//	output		          		ADC_SDI,
//	input 		          		ADC_SDO,

	//////////// ARDUINO //////////
	//inout 		    [15:0]		ARDUINO_IO,
	//inout 		          		ARDUINO_RESET_N,

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	//input 		          		FPGA_CLK2_50,
	//input 		          		FPGA_CLK3_50,

	//////////// HDMI //////////
//	inout 		          		HDMI_I2C_SCL,
//	inout 		          		HDMI_I2C_SDA,
//	inout 		          		HDMI_I2S,
//	inout 		          		HDMI_LRCLK,
//	inout 		          		HDMI_MCLK,
//	inout 		          		HDMI_SCLK,
//	output		          		HDMI_TX_CLK,
//	output		          		HDMI_TX_DE,
//	output		    [23:0]		HDMI_TX_D,
//	output		          		HDMI_TX_HS,
//	input 		          		HDMI_TX_INT,
//	output		          		HDMI_TX_VS,

	//////////// KEY //////////
	//input 		     [1:0]		KEY,

	//////////// LED //////////
	output		reg  [3:0]		LED,

	//////////// SW //////////
	//input 		     [3:0]		SW,

	//////////// GPIO_0, GPIO connect to RFS - RF and Sensor //////////
//	inout 		          		BT_KEY,
	input 		          		BT_UART_RX,
	output		          		BT_UART_TX
//	input 		          		LSENSOR_INT,
//	inout 		          		LSENSOR_SCL,
//	inout 		          		LSENSOR_SDA,
//	inout 		          		MPU_AD0_SDO,
//	output		          		MPU_CS_n,
//	output		          		MPU_FSYNC,
//	input 		          		MPU_INT,
//	inout 		          		MPU_SCL_SCLK,
//	inout 		          		MPU_SDA_SDI,
//	input 		          		RH_TEMP_DRDY_n,
//	inout 		          		RH_TEMP_I2C_SCL,
//	inout 		          		RH_TEMP_I2C_SDA,
//	inout 		     [7:0]		TMD_D,
//	input 		          		UART2USB_CTS,
//	output		          		UART2USB_RTS,
//	input 		          		UART2USB_RX,
//	output		          		UART2USB_TX,
//	output		          		WIFI_EN,
//	output		          		WIFI_RST_n,
//	input 		          		WIFI_UART0_CTS,
//	output		          		WIFI_UART0_RTS,
//	input 		          		WIFI_UART0_RX,
//	output		          		WIFI_UART0_TX,
//	input 		          		WIFI_UART1_RX
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire 				rts; // request to send		  
wire 				cts; // clear to send
wire 				rxd;
wire 				txd;
wire				KEY = 1;
wire	 [7:0]   uart_data;
wire	         rdempty;
wire	         write;
reg	     	   read;
reg	         cnt;
//=======================================================
//  Structural coding
//=======================================================

reg [7:0] test_cnt = 0;
always @(posedge FPGA_CLK1_50)
begin
	test_cnt = test_cnt + 1;
end

// UART Controller
uart_control UART0(

	.clk(FPGA_CLK1_50),
	.reset_n(KEY),
	// tx
	.write(write),
	.writedata(uart_data),
	//.writedata(test_cnt >> 6),

	// rx
	.read(read),
	.readdata(uart_data),
	.rdempty(rdempty),
	//
	.uart_clk_25m(cnt),
	.uart_tx(BT_UART_TX),
	.uart_rx(BT_UART_RX)
	
);	

//read
always@(posedge FPGA_CLK1_50)
begin
  if (~rdempty)
		read <= 1;
  else
		read <= 0;
end
assign  write = ( read & (~rdempty) );

always@(posedge FPGA_CLK1_50 or negedge KEY)
begin
  
  if(!KEY)
    LED <= 0;
  else if(KEY & write)
  begin
    case(uart_data)
		10'h30:LED <= 4'b0000;
		10'h31:LED <= 4'b0001;
		10'h32:LED <= 4'b0010;
		10'h33:LED <= 4'b0011;
//	 10'h30:LED <= LED | 8'd1;
//	 10'h31:LED <= LED | 8'd2;
//	 10'h32:LED <= LED | 8'd4;
//	 10'h33:LED <= LED | 8'd8;
//	 10'h34:LED <= LED & 8'he;
//	 10'h35:LED <= LED & 8'hd;
//	 10'h36:LED <= LED & 8'hb;
//	 10'h37:LED <= LED & 8'h7;
//	 10'h38:LED <= LED | 8'hf;
//	 10'h39:LED <= LED & 8'h0;
	 default : LED <= LED;
	 endcase
  end
  else
    LED <= LED;
end

always@(posedge FPGA_CLK1_50)
	cnt <= cnt + 1;


endmodule
